parms=list(split='information'))
# print training tree summary
summary(decision_tree)
# plot the decision tree
rpart.plot(decision_tree,type = 4, extra = 2, clip.right.labs = FALSE, varlen = 0, faclen = 3)
#Testing the model
prediction <- predict(object=decision_tree, test_set,type="class")
summary(prediction)
#calculating accuracy
#first: create confusion matrix
confusion_mat <- table(test_set$Label,prediction)
print(confusion_mat)
#calculate accuracy
accuracy <- sum(diag(confusion_mat))/sum(confusion_mat)
# ACCURACY OUTPUT : 94~97.5
print(accuracy)
#Author DataFlair
library(rpart)
library(readr)
library(caTools)
library(dplyr)
library(party)
library(partykit)
library(rpart.plot)
dataFile <- read.csv('D:\\Uni\\Fci_Y4_T2\\ERP\\Task 4\\car-dataset.csv',header=TRUE, sep=",")
print(dataFile)
set.seed(123)
sample_data = sample.split(dataFile, SplitRatio = 0.8)
train_data <- subset(dataFile, sample_data == TRUE)
test_data <- subset(dataFile, sample_data == FALSE)
Decisiontree <- rpart(Label ~ Feature1	+ Feature2 + Feature3 + Feature4 +	Feature5	+ Feature6,
method="class",
data = train_data,
control=rpart.control(minsplit=1),
parms=list(split='information'))
rpart.plot(Decisiontree,type = 4, extra = 2, clip.right.labs = FALSE, varlen = 0, faclen = 3)
# print training tree summary
summary(Decisiontree)
#Author DataFlair
library(rpart)
library(readr)
library(caTools)
library(dplyr)
library(party)
library(partykit)
library(rpart.plot)
dataFile <- read.csv('D:\\Uni\\Fci_Y4_T2\\ERP\\Task 4\\car-dataset.csv',header=TRUE, sep=",")
print(dataFile)
set.seed(123)
sample_data = sample.split(dataFile, SplitRatio = 0.8)
train_data <- subset(dataFile, sample_data == TRUE)
test_data <- subset(dataFile, sample_data == FALSE)
Decisiontree <- rpart(Label ~ Feature1	+ Feature2 + Feature3 + Feature4 +	Feature5	+ Feature6,
method="class",
data = train_data,
control=rpart.control(minsplit=1),
parms=list(split='information'))
rpart.plot(Decisiontree,type = 4, extra = 2, clip.right.labs = FALSE, varlen = 0, faclen = 3)
# print training tree summary
summary(Decisiontree)
# testing the people who are native speakers
# and those who are not
predict_model<-predict(Decisiontree, test_data)
# creates a table to count how many are classified
# as native speakers and how many are not
m_at <- table(test_data$nativeSpeaker, predict_model)
ac_Test <- sum(diag(table_mat)) / sum(table)
print(paste('Accuracy for test is found to be', ac_Test))
#Author DataFlair
library(rpart)
library(readr)
library(caTools)
library(dplyr)
library(party)
library(partykit)
library(rpart.plot)
dataFile <- read.csv('D:\\Uni\\Fci_Y4_T2\\ERP\\Task 4\\car-dataset.csv',header=TRUE, sep=",")
print(dataFile)
set.seed(123)
sample_data = sample.split(dataFile, SplitRatio = 0.8)
train_data <- subset(dataFile, sample_data == TRUE)
test_data <- subset(dataFile, sample_data == FALSE)
Decisiontree <- rpart(Label ~ Feature1	+ Feature2 + Feature3 + Feature4 +	Feature5	+ Feature6,
method="class",
data = train_data,
control=rpart.control(minsplit=1),
parms=list(split='information'))
rpart.plot(Decisiontree,type = 4, extra = 2, clip.right.labs = FALSE, varlen = 0, faclen = 3)
# print training tree summary
summary(Decisiontree)
# testing the people who are native speakers
# and those who are not
predict_model<-predict(Decisiontree, test_data)
# creates a table to count how many are classified
# as native speakers and how many are not
m_at <- table(test_data$nativeSpeaker, predict_model)
ac_Test <- sum(diag(table_mat)) / sum(table)
print(paste('Accuracy for test is found to be', ac_Test))
#Author DataFlair
library(rpart)
library(readr)
library(caTools)
library(dplyr)
library(party)
library(partykit)
library(rpart.plot)
dataFile <- read.csv('D:\\Uni\\Fci_Y4_T2\\ERP\\Task 4\\car-dataset.csv',header=TRUE, sep=",")
print(dataFile)
set.seed(123)
sample_data = sample.split(dataFile, SplitRatio = 0.8)
train_data <- subset(dataFile, sample_data == TRUE)
test_data <- subset(dataFile, sample_data == FALSE)
Decisiontree <- rpart(Label ~ Feature1	+ Feature2 + Feature3 + Feature4 +	Feature5	+ Feature6,
method="class",
data = train_data,
control=rpart.control(minsplit=1),
parms=list(split='information'))
rpart.plot(Decisiontree,type = 4, extra = 2, clip.right.labs = FALSE, varlen = 0, faclen = 3)
# print training tree summary
summary(Decisiontree)
# testing the people who are native speakers
# and those who are not
predict_model<-predict(Decisiontree, test_data)
# creates a table to count how many are classified
# as native speakers and how many are not
m_at <- table(test_data$nativeSpeaker, predict_model)
ac_Test <- sum(diag(m_at)) / sum(table)
print(paste('Accuracy for test is found to be', ac_Test))
#Author DataFlair
library(rpart)
library(readr)
library(caTools)
library(dplyr)
library(party)
library(partykit)
library(rpart.plot)
dataFile <- read.csv('D:\\Uni\\Fci_Y4_T2\\ERP\\Task 4\\car-dataset.csv',header=TRUE, sep=",")
print(dataFile)
set.seed(123)
sample_data = sample.split(dataFile, SplitRatio = 0.8)
train_data <- subset(dataFile, sample_data == TRUE)
test_data <- subset(dataFile, sample_data == FALSE)
Decisiontree <- rpart(Label ~ Feature1	+ Feature2 + Feature3 + Feature4 +	Feature5	+ Feature6,
method="class",
data = train_data,
control=rpart.control(minsplit=1),
parms=list(split='information'))
rpart.plot(Decisiontree,type = 4, extra = 2, clip.right.labs = FALSE, varlen = 0, faclen = 3)
# print training tree summary
summary(Decisiontree)
# testing the people who are native speakers
# and those who are not
predict_model<-predict(Decisiontree, test_data)
# creates a table to count how many are classified
# as native speakers and how many are not
m_at <- table(test_data$Label, predict_model)
ac_Test <- sum(diag(m_at)) / sum(table)
print(paste('Accuracy for test is found to be', ac_Test))
#Author DataFlair
library(rpart)
library(readr)
library(caTools)
library(dplyr)
library(party)
library(partykit)
library(rpart.plot)
dataFile <- read.csv('D:\\Uni\\Fci_Y4_T2\\ERP\\Task 4\\car-dataset.csv',header=TRUE, sep=",")
print(dataFile)
set.seed(123)
sample_data = sample.split(dataFile, SplitRatio = 0.8)
train_data <- subset(dataFile, sample_data == TRUE)
test_data <- subset(dataFile, sample_data == FALSE)
Decisiontree <- rpart(Label ~ Feature1	+ Feature2 + Feature3 + Feature4 +	Feature5	+ Feature6,
method="class",
data = train_data,
control=rpart.control(minsplit=1),
parms=list(split='information'))
rpart.plot(Decisiontree,type = 4, extra = 2, clip.right.labs = FALSE, varlen = 0, faclen = 3)
# print training tree summary
summary(Decisiontree)
# testing the people who are native speakers
# and those who are not
predict_model<-predict(Decisiontree, test_data)
# creates a table to count how many are classified
# as native speakers and how many are not
m_at <- table(test_data$Label, predict_model)
ac_Test <- sum(diag(m_at)) / sum(m_at)
print(paste('Accuracy for test is found to be', ac_Test))
#Author DataFlair
library(rpart)
library(readr)
library(caTools)
library(dplyr)
library(party)
library(partykit)
library(rpart.plot)
dataFile <- read.csv('D:\\Uni\\Fci_Y4_T2\\ERP\\Task 4\\car-dataset.csv',header=TRUE, sep=",")
print(dataFile)
set.seed(123)
sample_data = sample.split(dataFile, SplitRatio = 0.8)
train_data <- subset(dataFile, sample_data == TRUE)
test_data <- subset(dataFile, sample_data == FALSE)
Decisiontree <- rpart(Label ~ Feature1	+ Feature2 + Feature3 + Feature4 +	Feature5	+ Feature6,
method="class",
data = train_data,
control=rpart.control(minsplit=1),
parms=list(split='information'))
rpart.plot(Decisiontree,type = 4, extra = 2, clip.right.labs = FALSE, varlen = 0, faclen = 3)
# print training tree summary
summary(Decisiontree)
# testing the people who are native speakers
# and those who are not
predict_model<-predict(Decisiontree, test_data,type="class")
# creates a table to count how many are classified
# as native speakers and how many are not
m_at <- table(test_data$Label, predict_model)
ac_Test <- sum(diag(m_at)) / sum(m_at)
print(paste('Accuracy for test is found to be', ac_Test))
#Author DataFlair
library(rpart)
library(readr)
library(caTools)
library(dplyr)
library(party)
library(partykit)
library(rpart.plot)
# Read dataset in dataFile
dataFile <- read.csv('D:\\Uni\\Fci_Y4_T2\\ERP\\Task 4\\car-dataset.csv',header=TRUE, sep=",")
# print(dataFile)
# Divide the data set into 2 subsets,
#1st one will be 80% of the data and call it “Training Set”,
#2nd set will be 20% of the data, and call it “Testing Set”.
set.seed(123)
sample_data = sample.split(dataFile, SplitRatio = 0.8)
train_data <- subset(dataFile, sample_data == TRUE)
test_data <- subset(dataFile, sample_data == FALSE)
dim(train_data)
#Author DataFlair
library(rpart)
library(readr)
library(caTools)
library(dplyr)
library(party)
library(partykit)
library(rpart.plot)
# Read dataset in dataFile
dataFile <- read.csv('D:\\Uni\\Fci_Y4_T2\\ERP\\Task 4\\car-dataset.csv',header=TRUE, sep=",")
# print(dataFile)
# Divide the data set into 2 subsets,
#1st one will be 80% of the data and call it “Training Set”,
#2nd set will be 20% of the data, and call it “Testing Set”.
set.seed(123)
sample_data = sample.split(dataFile, SplitRatio = 0.8)
train_data <- subset(dataFile, sample_data == TRUE)
test_data <- subset(dataFile, sample_data == FALSE)
#dim(train_data)
#dim(test_data)
# Build the decision tree using the training set
decisionTree <- rpart(Label ~ Feature1	+ Feature2 + Feature3 + Feature4 +	Feature5	+ Feature6,
method="class",
data = train_data,
control=rpart.control(minsplit=1),
parms=list(split='structural information'))
rpart.plot(decisionTree,type = 4, extra = 2, clip.right.labs = FALSE, varlen = 0, faclen = 3)
summary(decisionTree)
#predict the label of the testing set instances
predict_model <-predict(decisionTree, test_data,type="class")
# creates a table to count how many are classified
# as native speakers and how many are not
accuracyMatrix <- table(test_data$Label, predict_model)
# evaluate your model in terms of accuracy
accuracy <- sum(diag(accuracyMatrix)) / sum(accuracyMatrix)
print(paste('Accuracy of the model is : ', accuracy))
#Author DataFlair
library(rpart)
library(readr)
library(caTools)
library(dplyr)
library(party)
library(partykit)
library(rpart.plot)
# Read dataset in dataFile
dataFile <- read.csv('D:\\Uni\\Fci_Y4_T2\\ERP\\Task 4\\car-dataset.csv',header=TRUE, sep=",")
# print(dataFile)
# Divide the data set into 2 subsets,
#1st one will be 80% of the data and call it “Training Set”,
#2nd set will be 20% of the data, and call it “Testing Set”.
set.seed(123)
sample_data = sample.split(dataFile, SplitRatio = 0.8)
train_data <- subset(dataFile, sample_data == TRUE)
test_data <- subset(dataFile, sample_data == FALSE)
#dim(train_data)
#dim(test_data)
# Build the decision tree using the training set
decisionTree <- rpart(Label ~ Feature1	+ Feature2 + Feature3 + Feature4 +	Feature5	+ Feature6,
method="class",
data = train_data,
control=rpart.control(minsplit=1),
parms=list(split='structural information'))
rpart.plot(decisionTree,type = 4, extra = 2, clip.right.labs = FALSE, varlen = 0, faclen = 3)
summary(decisionTree)
#predict the label of the testing set instances
predict_model <-predict(decisionTree, test_data,type="class")
# creates a table to count how many are classified
# as native speakers and how many are not
accuracyMatrix <- table(test_data$Label, predict_model)
# evaluate your model in terms of accuracy
accuracy <- sum(diag(accuracyMatrix)) / sum(accuracyMatrix)
print(paste('Accuracy of the model is : ', accuracy))
#Author DataFlair
library(rpart)
library(readr)
library(caTools)
library(dplyr)
library(party)
library(partykit)
library(rpart.plot)
# Read dataset in dataFile
dataFile <- read.csv('D:\\Uni\\Fci_Y4_T2\\ERP\\Task 4\\car-dataset.csv',header=TRUE, sep=",")
# print(dataFile)
# Divide the data set into 2 subsets,
#1st one will be 80% of the data and call it “Training Set”,
#2nd set will be 20% of the data, and call it “Testing Set”.
set.seed(123)
sample_data = sample.split(dataFile, SplitRatio = 0.8)
train_data <- subset(dataFile, sample_data == TRUE)
test_data <- subset(dataFile, sample_data == FALSE)
#dim(train_data)
#dim(test_data)
# Build the decision tree using the training set
decisionTree <- rpart(Label ~ Feature1	+ Feature2 + Feature3 + Feature4 +	Feature5	+ Feature6,
method="class",
data = train_data,
control=rpart.control(minsplit=1),
parms=list(split='structural information'))
rpart.plot(decisionTree,type = 4, extra = 2, clip.right.labs = FALSE, varlen = 0, faclen = 3)
summary(decisionTree)
#predict the label of the testing set instances
predict_model <-predict(decisionTree, test_data,type="class")
# creates a table to count how many are classified
# as native speakers and how many are not
accuracyMatrix <- table(test_data$Label, predict_model)
# evaluate your model in terms of accuracy
accuracy <- sum(diag(accuracyMatrix)) / sum(accuracyMatrix)
print(paste('Accuracy of the model is : ', accuracy))
#Author DataFlair
library(rpart)
library(readr)
library(caTools)
library(dplyr)
library(party)
library(partykit)
library(rpart.plot)
# Read dataset in dataFile
dataFile <- read.csv('D:\\Uni\\Fci_Y4_T2\\ERP\\Task 4\\car-dataset.csv',header=TRUE, sep=",")
# print(dataFile)
# Divide the data set into 2 subsets,
#1st one will be 80% of the data and call it “Training Set”,
#2nd set will be 20% of the data, and call it “Testing Set”.
set.seed(123)
sample_data = sample.split(dataFile, SplitRatio = 0.8)
train_data <- subset(dataFile, sample_data == TRUE)
test_data <- subset(dataFile, sample_data == FALSE)
#dim(train_data)
#dim(test_data)
# Build the decision tree using the training set
decisionTree <- rpart(Label ~ Feature1	+ Feature2 + Feature3 + Feature4 +	Feature5	+ Feature6,
method="class",
data = train_data,
control=rpart.control(minsplit=1),
parms=list(split='structural information'))
rpart.plot(decisionTree,type = 4, extra = 2, clip.right.labs = FALSE, varlen = 0, faclen = 3)
summary(decisionTree)
#predict the label of the testing set instances
predict_model <-predict(decisionTree, test_data,type="class")
# creates a table to count how many are classified
# as native speakers and how many are not
accuracyMatrix <- table(test_data$Label, predict_model)
# evaluate your model in terms of accuracy
accuracy <- sum(diag(accuracyMatrix)) / sum(accuracyMatrix)
print(paste('Accuracy of the model is : ', accuracy))
#Author DataFlair
library(rpart)
library(readr)
library(caTools)
library(dplyr)
library(party)
library(partykit)
library(rpart.plot)
# Read dataset in dataFile
dataFile <- read.csv('D:\\Uni\\Fci_Y4_T2\\ERP\\Task 4\\car-dataset.csv',header=TRUE, sep=",")
# print(dataFile)
# Divide the data set into 2 subsets,
#1st one will be 80% of the data and call it “Training Set”,
#2nd set will be 20% of the data, and call it “Testing Set”.
set.seed(123)
sample_data = sample.split(dataFile, SplitRatio = 0.8)
train_data <- subset(dataFile, sample_data == TRUE)
test_data <- subset(dataFile, sample_data == FALSE)
#dim(train_data)
#dim(test_data)
# Build the decision tree using the training set
decisionTree <- rpart(Label ~ Feature1	+ Feature2 + Feature3 + Feature4 +	Feature5	+ Feature6,
method="class",
data = train_data,
control=rpart.control(minsplit=1),
parms=list(split='structural information'))
rpart.plot(decisionTree,type = 4, extra = 2, clip.right.labs = FALSE, varlen = 0, faclen = 3)
summary(decisionTree)
#predict the label of the testing set instances
predict_model <-predict(decisionTree, test_data,type="class")
# creates a table to count how many are classified
# as native speakers and how many are not
accuracyMatrix <- table(test_data$Label, predict_model)
# evaluate your model in terms of accuracy
accuracy <- sum(diag(accuracyMatrix)) / sum(accuracyMatrix)
print(paste('Accuracy of the model is : ', accuracy))
library(rpart)
library(readr)
library(caTools)
library(dplyr)
library(party)
library(partykit)
library(rpart.plot)
# Read dataset in dataFile
dataFile <- read.csv('D:\\Uni\\Fci_Y4_T2\\ERP\\Task 4\\car-dataset.csv',header=TRUE, sep=",")
# print(dataFile)
# Divide the data set into 2 subsets,
#1st one will be 80% of the data and call it “Training Set”,
#2nd set will be 20% of the data, and call it “Testing Set”.
set.seed(123)
sample_data = sample.split(dataFile, SplitRatio = 0.8)
train_data <- subset(dataFile, sample_data == TRUE)
test_data <- subset(dataFile, sample_data == FALSE)
#dim(train_data)
#dim(test_data)
# Build the decision tree using the training set
decisionTree <- rpart(Label ~ Feature1	+ Feature2 + Feature3 + Feature4 +	Feature5	+ Feature6,
method="class",
data = train_data,
control=rpart.control(minsplit=1),
parms=list(split='structural information'))
rpart.plot(decisionTree,type = 4, extra = 2, clip.right.labs = FALSE, varlen = 0, faclen = 3)
summary(decisionTree)
#predict the label of the testing set instances
predict_model <-predict(decisionTree, test_data,type="class")
# creates a table to count how many are classified
# as native speakers and how many are not
accuracyMatrix <- table(test_data$Label, predict_model)
# evaluate your model in terms of accuracy 94-95%
accuracy <- sum(diag(accuracyMatrix)) / sum(accuracyMatrix)
print(paste('Accuracy of the model is : ', accuracy))
library(rpart)
library(readr)
library(caTools)
library(dplyr)
library(party)
library(partykit)
library(rpart.plot)
# Read dataset in dataFile
dataFile <- read.csv('D:\\Uni\\Fci_Y4_T2\\ERP\\Task 4\\car-dataset.csv',header=TRUE, sep=",")
# print(dataFile)
# Divide the data set into 2 subsets,
#1st one will be 80% of the data and call it “Training Set”,
#2nd set will be 20% of the data, and call it “Testing Set”.
set.seed(123)
sample_data = sample.split(dataFile, SplitRatio = 0.8)
train_data <- subset(dataFile, sample_data == TRUE)
test_data <- subset(dataFile, sample_data == FALSE)
#dim(train_data)
#dim(test_data)
# Build the decision tree using the training set
decisionTree <- rpart(Label ~ Feature1	+ Feature2 + Feature3 + Feature4 +	Feature5	+ Feature6,
method="class",
data = train_data,
control=rpart.control(minsplit=1),
parms=list(split='structural information'))
rpart.plot(decisionTree,type = 4, extra = 2, clip.right.labs = FALSE, varlen = 0, faclen = 3)
summary(decisionTree)
#predict the label of the testing set instances
predict_model <-predict(decisionTree, test_data,type="class")
# creates a table to count how many are classified
# as native speakers and how many are not
accuracyMatrix <- table(test_data$Label, predict_model)
# evaluate your model in terms of accuracy 94-95%
accuracy <- sum(diag(accuracyMatrix)) / sum(accuracyMatrix)
print(paste('Accuracy of the model is : ', accuracy))
library("rpart")
library("rpart.plot")
library("RColorBrewer")
library("caTools")
library("data.tree")
getwd ()
setwd("D:\\Uni\\Fci_Y4_T2\\ERP\\Task 4\\")
cars_data <-read.csv("car-dataset.csv",header=TRUE,sep=",")
class(cars_data)
summary(cars_data)
set.seed(1234)
split = sample.split(cars_data$Label, SplitRatio = .8)
training_set = subset(cars_data, split ==TRUE)
testing_set = subset(cars_data, split ==FALSE)
cars_data <- rpart(Label ~ Feature1 + Feature2 + Feature3 + Feature4 +Feature5 + Feature6,
method="class",
data=training_set,
control=rpart.control(minsplit = 1),
parms = list(split='information'))
summary(cars_data)
rpart.plot(cars_data, type=4, extra=2,clip.right.labs=FALSE,varlen=0,faclen=3)
prediciton<-predict(cars_data, testing_set, type =c ("class"))
tableaccuracy <- table(testing_set$Label,prediciton)
accuracytest <- sum(diag(tableaccuracy)) / sum(tableaccuracy)
#accu = 0.981
